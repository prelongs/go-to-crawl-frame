// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CmsCrawlReplayProgramTaskDao is the data access object for table cms_crawl_replay_program_task.
type CmsCrawlReplayProgramTaskDao struct {
	table   string                           // table is the underlying table name of the DAO.
	group   string                           // group is the database configuration group name of current DAO.
	columns CmsCrawlReplayProgramTaskColumns // columns contains all the column names of Table for convenient usage.
}

// CmsCrawlReplayProgramTaskColumns defines and stores column names for table cms_crawl_replay_program_task.
type CmsCrawlReplayProgramTaskColumns struct {
	Id               string // 主键ID
	HostIp           string //
	ManifestId       string // 队列ID
	ConfigId         string // 配置单ID
	ProgramNo        string // 节目编号
	ProgramName      string // 节目名称
	ProgramStartTime string // 节目开始时间
	ProgramEndTime   string // 节目结束时间
	ProgramFilePath  string //
	ProgramServerUrl string //
	ProgramPlayUrl   string //
	CrawlStatus      string // 抓取状态.0-创建任务;1-录制中;2-录制失败;3-录制完成;
	ErrorMsg         string // 错误信息
	CreateUser       string // 添加人
	CreateTime       string // 添加时间
	UpdateUser       string // 更新人
	UpdateTime       string // 更新时间
}

// cmsCrawlReplayProgramTaskColumns holds the columns for table cms_crawl_replay_program_task.
var cmsCrawlReplayProgramTaskColumns = CmsCrawlReplayProgramTaskColumns{
	Id:               "id",
	HostIp:           "host_ip",
	ManifestId:       "manifest_id",
	ConfigId:         "config_id",
	ProgramNo:        "program_no",
	ProgramName:      "program_name",
	ProgramStartTime: "program_start_time",
	ProgramEndTime:   "program_end_time",
	ProgramFilePath:  "program_file_path",
	ProgramServerUrl: "program_server_url",
	ProgramPlayUrl:   "program_play_url",
	CrawlStatus:      "crawl_status",
	ErrorMsg:         "error_msg",
	CreateUser:       "create_user",
	CreateTime:       "create_time",
	UpdateUser:       "update_user",
	UpdateTime:       "update_time",
}

// NewCmsCrawlReplayProgramTaskDao creates and returns a new DAO object for table data access.
func NewCmsCrawlReplayProgramTaskDao() *CmsCrawlReplayProgramTaskDao {
	return &CmsCrawlReplayProgramTaskDao{
		group:   "default",
		table:   "cms_crawl_replay_program_task",
		columns: cmsCrawlReplayProgramTaskColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CmsCrawlReplayProgramTaskDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CmsCrawlReplayProgramTaskDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CmsCrawlReplayProgramTaskDao) Columns() CmsCrawlReplayProgramTaskColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CmsCrawlReplayProgramTaskDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CmsCrawlReplayProgramTaskDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CmsCrawlReplayProgramTaskDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
