// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CmsCrawlReplayManifestTaskDao is the data access object for table cms_crawl_replay_manifest_task.
type CmsCrawlReplayManifestTaskDao struct {
	table   string                            // table is the underlying table name of the DAO.
	group   string                            // group is the database configuration group name of current DAO.
	columns CmsCrawlReplayManifestTaskColumns // columns contains all the column names of Table for convenient usage.
}

// CmsCrawlReplayManifestTaskColumns defines and stores column names for table cms_crawl_replay_manifest_task.
type CmsCrawlReplayManifestTaskColumns struct {
	Id             string // 主键ID
	ReplayConfigId string // 任务ID
	ReplayDay      string // 节目日
	CrawlStatus    string // 抓取状态.0-创建任务;1-抓取中;2-抓取失败;3-抓取完成;
	ErrorMsg       string // 错误信息
	CreateUser     string // 添加人
	CreateTime     string // 添加时间
	UpdateUser     string // 更新人
	UpdateTime     string // 更新时间
	Type           string // 节目单生成方式 0 按爬虫地址 1 自动生成
}

// cmsCrawlReplayManifestTaskColumns holds the columns for table cms_crawl_replay_manifest_task.
var cmsCrawlReplayManifestTaskColumns = CmsCrawlReplayManifestTaskColumns{
	Id:             "id",
	ReplayConfigId: "replay_config_id",
	ReplayDay:      "replay_day",
	CrawlStatus:    "crawl_status",
	ErrorMsg:       "error_msg",
	CreateUser:     "create_user",
	CreateTime:     "create_time",
	UpdateUser:     "update_user",
	UpdateTime:     "update_time",
	Type:           "type",
}

// NewCmsCrawlReplayManifestTaskDao creates and returns a new DAO object for table data access.
func NewCmsCrawlReplayManifestTaskDao() *CmsCrawlReplayManifestTaskDao {
	return &CmsCrawlReplayManifestTaskDao{
		group:   "default",
		table:   "cms_crawl_replay_manifest_task",
		columns: cmsCrawlReplayManifestTaskColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CmsCrawlReplayManifestTaskDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CmsCrawlReplayManifestTaskDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CmsCrawlReplayManifestTaskDao) Columns() CmsCrawlReplayManifestTaskColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CmsCrawlReplayManifestTaskDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CmsCrawlReplayManifestTaskDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CmsCrawlReplayManifestTaskDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
