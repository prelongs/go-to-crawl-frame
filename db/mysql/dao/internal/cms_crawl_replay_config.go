// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CmsCrawlReplayConfigDao is the data access object for table cms_crawl_replay_config.
type CmsCrawlReplayConfigDao struct {
	table   string                      // table is the underlying table name of the DAO.
	group   string                      // group is the database configuration group name of current DAO.
	columns CmsCrawlReplayConfigColumns // columns contains all the column names of Table for convenient usage.
}

// CmsCrawlReplayConfigColumns defines and stores column names for table cms_crawl_replay_config.
type CmsCrawlReplayConfigColumns struct {
	Id            string // 主键ID
	ChannelNo     string // 频道编号
	ChannelName   string // 频道名称
	ChannelNameEn string //
	ChannelIcon   string //
	Type          string // 节目单生成方式 0 按爬虫地址 1 自动生成
	SeedUrl       string // 种子URL
	SeedParams    string // 种子URL携带的参数。保存Json串
	Host          string // 配置录制的机器
	Domain        string //
	PlayUrl       string // 播放地址(流)
	ErrorMsg      string // 错误信息
	CreateUser    string // 添加人
	CreateTime    string // 添加时间
	UpdateUser    string // 更新人
	UpdateTime    string // 更新时间
	Status        string // 状态：1在用 2停用
	Sort          string // 排序
	Note          string // 备注
	Mark          string // 有效标识(1正常 0删除)
}

// cmsCrawlReplayConfigColumns holds the columns for table cms_crawl_replay_config.
var cmsCrawlReplayConfigColumns = CmsCrawlReplayConfigColumns{
	Id:            "id",
	ChannelNo:     "channel_no",
	ChannelName:   "channel_name",
	ChannelNameEn: "channel_name_en",
	ChannelIcon:   "channel_icon",
	Type:          "type",
	SeedUrl:       "seed_url",
	SeedParams:    "seed_params",
	Host:          "host",
	Domain:        "domain",
	PlayUrl:       "play_url",
	ErrorMsg:      "error_msg",
	CreateUser:    "create_user",
	CreateTime:    "create_time",
	UpdateUser:    "update_user",
	UpdateTime:    "update_time",
	Status:        "status",
	Sort:          "sort",
	Note:          "note",
	Mark:          "mark",
}

// NewCmsCrawlReplayConfigDao creates and returns a new DAO object for table data access.
func NewCmsCrawlReplayConfigDao() *CmsCrawlReplayConfigDao {
	return &CmsCrawlReplayConfigDao{
		group:   "default",
		table:   "cms_crawl_replay_config",
		columns: cmsCrawlReplayConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CmsCrawlReplayConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CmsCrawlReplayConfigDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CmsCrawlReplayConfigDao) Columns() CmsCrawlReplayConfigColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CmsCrawlReplayConfigDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CmsCrawlReplayConfigDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CmsCrawlReplayConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
