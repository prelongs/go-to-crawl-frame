// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CmsCrawlVodConfigDao is the data access object for table cms_crawl_vod_config.
type CmsCrawlVodConfigDao struct {
	table   string                   // table is the underlying table name of the DAO.
	group   string                   // group is the database configuration group name of current DAO.
	columns CmsCrawlVodConfigColumns // columns contains all the column names of Table for convenient usage.
}

// CmsCrawlVodConfigColumns defines and stores column names for table cms_crawl_vod_config.
type CmsCrawlVodConfigColumns struct {
	Id            string // 主键ID
	HostType      string // 传递给crawlQueue的hostType字段。2-nivod网；3-BananTV
	VodType       string // 点播类型.0-电影；1-剧集（标志给展示逻辑，爬虫统一按剧集逻辑走）
	DomainKeyPart string // 域名关键部分.用于配置策略
	ProgramNo     string // 栏目编号
	ProgramName   string // 栏目名称
	ProgramIcon   string // 栏目图标
	CategoryNo    string // 分类编号
	CategoryName  string // 分类名称
	SeedUrl       string // 种子URL
	SeedParams    string // 种子URL携带的参数。保存Json串
	SeedStatus    string // 状态：1在用 2停用
	PageSize      string // 翻页次数
	SeedDesc      string // 描述
	ErrorMsg      string // 错误信息
	CreateUser    string // 添加人
	CreateTime    string // 添加时间
	UpdateUser    string // 更新人
	UpdateTime    string // 更新时间
}

// cmsCrawlVodConfigColumns holds the columns for table cms_crawl_vod_config.
var cmsCrawlVodConfigColumns = CmsCrawlVodConfigColumns{
	Id:            "id",
	HostType:      "host_type",
	VodType:       "vod_type",
	DomainKeyPart: "domain_key_part",
	ProgramNo:     "program_no",
	ProgramName:   "program_name",
	ProgramIcon:   "program_icon",
	CategoryNo:    "category_no",
	CategoryName:  "category_name",
	SeedUrl:       "seed_url",
	SeedParams:    "seed_params",
	SeedStatus:    "seed_status",
	PageSize:      "page_size",
	SeedDesc:      "seed_desc",
	ErrorMsg:      "error_msg",
	CreateUser:    "create_user",
	CreateTime:    "create_time",
	UpdateUser:    "update_user",
	UpdateTime:    "update_time",
}

// NewCmsCrawlVodConfigDao creates and returns a new DAO object for table data access.
func NewCmsCrawlVodConfigDao() *CmsCrawlVodConfigDao {
	return &CmsCrawlVodConfigDao{
		group:   "default",
		table:   "cms_crawl_vod_config",
		columns: cmsCrawlVodConfigColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CmsCrawlVodConfigDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CmsCrawlVodConfigDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CmsCrawlVodConfigDao) Columns() CmsCrawlVodConfigColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CmsCrawlVodConfigDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CmsCrawlVodConfigDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CmsCrawlVodConfigDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
