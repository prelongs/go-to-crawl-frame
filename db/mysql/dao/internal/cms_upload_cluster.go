// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CmsUploadClusterDao is the data access object for table cms_upload_cluster.
type CmsUploadClusterDao struct {
	table   string                  // table is the underlying table name of the DAO.
	group   string                  // group is the database configuration group name of current DAO.
	columns CmsUploadClusterColumns // columns contains all the column names of Table for convenient usage.
}

// CmsUploadClusterColumns defines and stores column names for table cms_upload_cluster.
type CmsUploadClusterColumns struct {
	Id               string // 集群ID
	ClusterNo        string // 集群编码.(仅用于助记. eg: 集群A,集群B,...)
	ClusterIps       string // 集群IP列表，英文逗号隔开(仅用于助记)
	ClusterDu        string // 集群已经使用容量,单位为G(前端自行转化为T,通过定时任务来自动刷新)
	ClusterDf        string // 集群剩余容量,单位为G(前端自行转化为T,通过定时任务来自动刷新),可用该值进行告警
	ClusterAvailable string // 是否可用. true-可用
	ClusterNote      string // 备注
	CreateUser       string // 添加人
	CreateTime       string // 添加时间
	UpdateUser       string // 更新人
	UpdateTime       string // 更新时间
}

// cmsUploadClusterColumns holds the columns for table cms_upload_cluster.
var cmsUploadClusterColumns = CmsUploadClusterColumns{
	Id:               "id",
	ClusterNo:        "cluster_no",
	ClusterIps:       "cluster_ips",
	ClusterDu:        "cluster_du",
	ClusterDf:        "cluster_df",
	ClusterAvailable: "cluster_available",
	ClusterNote:      "cluster_note",
	CreateUser:       "create_user",
	CreateTime:       "create_time",
	UpdateUser:       "update_user",
	UpdateTime:       "update_time",
}

// NewCmsUploadClusterDao creates and returns a new DAO object for table data access.
func NewCmsUploadClusterDao() *CmsUploadClusterDao {
	return &CmsUploadClusterDao{
		group:   "default",
		table:   "cms_upload_cluster",
		columns: cmsUploadClusterColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CmsUploadClusterDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CmsUploadClusterDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CmsUploadClusterDao) Columns() CmsUploadClusterColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CmsUploadClusterDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CmsUploadClusterDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CmsUploadClusterDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
