// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CmsCrawlVodTvDao is the data access object for table cms_crawl_vod_tv.
type CmsCrawlVodTvDao struct {
	table   string               // table is the underlying table name of the DAO.
	group   string               // group is the database configuration group name of current DAO.
	columns CmsCrawlVodTvColumns // columns contains all the column names of Table for convenient usage.
}

// CmsCrawlVodTvColumns defines and stores column names for table cms_crawl_vod_tv.
type CmsCrawlVodTvColumns struct {
	Id            string // 主键ID
	VodConfigId   string // 配置表主键ID
	VodMd5        string // 电视剧md5。防重复抓取
	CrawlStatus   string // 抓取状态.0-创建任务;1-自动补全视频信息中;2-补充视频信息失败;3-补充视频信息成功;4-补充TV ID信息中;5-补充TV ID信息失败;6-补充TV ID信息成功
	VideoCountry  string // 国家
	VideoYear     string // 年份
	VideoNo       string // 栏目编号
	VideoName     string // 视频名称
	VideoDirector string // 视频导演
	VideoActor    string // 视频演员
	VideoIcon     string // 栏目图标
	VideoDesc     string // 栏目描述
	SeedUrl       string // 种子URL
	SeedParams    string // 种子URL携带的参数。保存Json串
	ErrorCnt      string // 失败次数
	ErrorMsg      string // 错误信息
	VideoLanguage string // 语言
	VideoQuality  string // 清晰度
	VideoTag      string //
	VideoCollId   string // 剧集ID
	CreateUser    string // 添加人
	CreateTime    string // 添加时间
	UpdateUser    string // 更新人
	UpdateTime    string // 更新时间
}

// cmsCrawlVodTvColumns holds the columns for table cms_crawl_vod_tv.
var cmsCrawlVodTvColumns = CmsCrawlVodTvColumns{
	Id:            "id",
	VodConfigId:   "vod_config_id",
	VodMd5:        "vod_md5",
	CrawlStatus:   "crawl_status",
	VideoCountry:  "video_country",
	VideoYear:     "video_year",
	VideoNo:       "video_no",
	VideoName:     "video_name",
	VideoDirector: "video_director",
	VideoActor:    "video_actor",
	VideoIcon:     "video_icon",
	VideoDesc:     "video_desc",
	SeedUrl:       "seed_url",
	SeedParams:    "seed_params",
	ErrorCnt:      "error_cnt",
	ErrorMsg:      "error_msg",
	VideoLanguage: "video_language",
	VideoQuality:  "video_quality",
	VideoTag:      "video_tag",
	VideoCollId:   "video_coll_id",
	CreateUser:    "create_user",
	CreateTime:    "create_time",
	UpdateUser:    "update_user",
	UpdateTime:    "update_time",
}

// NewCmsCrawlVodTvDao creates and returns a new DAO object for table data access.
func NewCmsCrawlVodTvDao() *CmsCrawlVodTvDao {
	return &CmsCrawlVodTvDao{
		group:   "default",
		table:   "cms_crawl_vod_tv",
		columns: cmsCrawlVodTvColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CmsCrawlVodTvDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CmsCrawlVodTvDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CmsCrawlVodTvDao) Columns() CmsCrawlVodTvColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CmsCrawlVodTvDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CmsCrawlVodTvDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CmsCrawlVodTvDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
