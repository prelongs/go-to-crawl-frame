// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// CmsCrawlQueueDao is the data access object for table cms_crawl_queue.
type CmsCrawlQueueDao struct {
	table   string               // table is the underlying table name of the DAO.
	group   string               // group is the database configuration group name of current DAO.
	columns CmsCrawlQueueColumns // columns contains all the column names of Table for convenient usage.
}

// CmsCrawlQueueColumns defines and stores column names for table cms_crawl_queue.
type CmsCrawlQueueColumns struct {
	Id              string // 主键ID
	HostType        string // 0正常模式 1腾讯
	HostIp          string // 任务处理的主机的IP。由哪台机器领取的M3U8下载任务就不能变更了
	CountryCode     string // 国家二字码.(eg: CN,US,SG等)
	VideoYear       string // 视频发布年份
	VideoCollId     string // 视频集ID（视频集ID，不限于电视剧,-1代表单集视频，或者说电影）
	VideoItemId     string // 视频集对应视频项ID（不限于电视剧的剧集）
	CrawlType       string // 抓取类型.1-页面URL;2-文件m3u8
	CrawlStatus     string // //抓取状态.0-创建任务;1-M3U8 URL抓取中;2-M3U8 URL抓取失败;3-M3U8 URL抓取完成;4-M3U8下载中;5-M3U8下载异常;6-M3U8下载结束
	CrawlSeedUrl    string // 种子URL
	CrawlSeedParams string // 种子URL携带的参数。保存Json串
	CrawlM3U8Url    string // m3u8 url
	CrawlM3U8Cnt    string // m3u8 url抓取次数
	CrawlM3U8Text   string //
	CrawlM3U8Notify string // crawl_m3u8_cnt次数超过阈值告警,需要人工介入,大概率要优化代码了
	ErrorMsg        string // 错误信息
	CreateUser      string // 添加人
	CreateTime      string // 添加时间
	UpdateUser      string // 更新人
	UpdateTime      string // 更新时间
}

// cmsCrawlQueueColumns holds the columns for table cms_crawl_queue.
var cmsCrawlQueueColumns = CmsCrawlQueueColumns{
	Id:              "id",
	HostType:        "host_type",
	HostIp:          "host_ip",
	CountryCode:     "country_code",
	VideoYear:       "video_year",
	VideoCollId:     "video_coll_id",
	VideoItemId:     "video_item_id",
	CrawlType:       "crawl_type",
	CrawlStatus:     "crawl_status",
	CrawlSeedUrl:    "crawl_seed_url",
	CrawlSeedParams: "crawl_seed_params",
	CrawlM3U8Url:    "crawl_m3u8_url",
	CrawlM3U8Cnt:    "crawl_m3u8_cnt",
	CrawlM3U8Text:   "crawl_m3u8_text",
	CrawlM3U8Notify: "crawl_m3u8_notify",
	ErrorMsg:        "error_msg",
	CreateUser:      "create_user",
	CreateTime:      "create_time",
	UpdateUser:      "update_user",
	UpdateTime:      "update_time",
}

// NewCmsCrawlQueueDao creates and returns a new DAO object for table data access.
func NewCmsCrawlQueueDao() *CmsCrawlQueueDao {
	return &CmsCrawlQueueDao{
		group:   "default",
		table:   "cms_crawl_queue",
		columns: cmsCrawlQueueColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *CmsCrawlQueueDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *CmsCrawlQueueDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *CmsCrawlQueueDao) Columns() CmsCrawlQueueColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *CmsCrawlQueueDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *CmsCrawlQueueDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *CmsCrawlQueueDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
